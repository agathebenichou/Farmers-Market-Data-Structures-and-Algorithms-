#BlueJ class context
comment0.params=
comment0.target=int\ getMoney()
comment0.text=\r\n\ A\ method\ that\ returns\ the\ money\ made\ in\ the\ market\ throughout\ the\ 4\ hours\ it\ was\ open.\r\n\ \r\n\ @return\ The\ amount\ of\ money\ made.\r\n
comment1.params=
comment1.target=java.util.ArrayList\ GenerateNeeds()
comment1.text=\r\n\ This\ method\ generates\ a\ list\ of\ needs,\ in\ the\ form\ of\ an\ array\ list,\ for\ each\ customer.\r\n\ The\ generation\ depends\ on\ the\ mean\ and\ standard\ deviation\ of\ each\ need.\r\n\ Some\ needs,\ like\ vegetables,\ meat,\ and\ dairy,\ are\ more\ desired\ and\ will\ be\ in\ more\ lists.\r\n\ Other\ needs,\ like\ baked\ goods,\ fruit,\ meat\ and\ beverages,\ are\ less\ desired\ and\ will\ be\ in\ less\ lists.\r\n\ The\ list\ generated\ can\ have\ 0\ elements\ or\ can\ have\ 6\ elements,\ depending\ on\ the\ probability.\r\n\ \r\n\ The\ method\ creates\ an\ ArrayList\ that\ contains\ Objects.\ It\ goes\ through\ each\ stall\ type\ and\ generates\ a\ random\ number\ for\ each\ stall\ type\ depending\r\n\ on\ the\ mean\ and\ standard\ deviation\ numbers\ given\ in\ class.\ This\ generated\ random\ number\ must\ be\ between\ certain\ intervals,\ depending\ on\ the\ stall\ type\r\n\ in\ order\ for\ that\ stall\ type\ item\ to\ be\ added\ to\ the\ list\ of\ needs.\r\n\ \r\n\ The\ math\ works\ like\ so\:\ If\ the\ stall\ types\ have\ a\ high\ demand,\ like\ vegetables,\ meat\ and\ dairy,\ then\ the\ range\ of\ numbers\ within\ the\ if/else\ is\ greater\ than\ the\ range\r\n\ of\ numbers\ for\ stall\ types\ have\ less\ demand.\ I\ tested\ each\ individual\ if/else\ for\ each\ stall\ type\ so\ that\ out\ of\ 10\ times\ it\ was\ tested,\ a\ need\ was\ added\ to\ the\ \r\n\ Array\ List\ only\ 4/10\ times\ for\ baked\ goods\ because\ 37%\ of\ customers\ want\ a\ baked\ goods.\ I\ did\ the\ same\ with\ each\ other\ stall\ type.\r\n\ \r\n\ @return\ an\ ArrayList\ with\ Object\ elements\ that\ is\ the\ list\ of\ needs\ for\ one\ customer\r\n
comment2.params=customer\ iD\ needs\ currentTime
comment2.target=int\ bakedgoodsqueue(java.lang.Object,\ int,\ java.util.ArrayList,\ int)
comment2.text=\r\n\ This\ method\ is\ for\ the\ baked\ goods\ queue.\ \r\n\ It\ starts\ by\ generating\ a\ waiting\ time\ for\ each\ customer\ to\ stay\ on\ the\ queue\ using\ the\ Gaussian\ method\ based\ on\ a\ mean\ amount\ of\ time\ and\ standard\ deviation\ given\ \r\n\ in\ class.\ It\ adds\ this\ time\ to\ the\ current\ time,\ and\ that\ added\ time\ is\ the\ time\ that\ the\ customers\ will\ receive\ their\ item,\ be\ removed\ from\ the\ queue\ and\ move\ on\r\n\ to\ their\ next\ item\ in\ the\ next\ queue\ if\ they\ have\ one.\ \r\n\ It\ checks\ to\ see\ if\ that\ stall\ type\ item\ is\ in\ the\ customers\ queue,\ if\ it\ is\ then\ the\ method\ checks\ to\ make\ sure\ that\ market\ has\ not\ closed.\ If\ the\ market\ has\ not\r\n\ closed,\ then\ it\ adds\ the\ customer\ to\ the\ queue\ for\ that\ item.\ The\ method\ waits\ until\ the\ current\ time\ increments\ and\ when\ the\ wait\ time\ has\ reached\ the\ current\ time,\ \r\n\ that\ is\ when\ the\ customer\ is\ removed\ from\ the\ queue.\ Those\ needs\ are\ removed\ from\ their\ lists\ and\ the\ money\ made\ in\ the\ market\ is\ incremented.\r\n\ \r\n\ @param\ The\ Customer\ object\ that\ will\ be\ placed\ on\ the\ queue.\r\n\ @param\ The\ id\ of\ the\ Customer.\r\n\ @param\ The\ Array\ List\ of\ needs\ the\ customer\ has.\r\n\ @param\ The\ current\ time.\r\n\ \r\n\ @return\ The\ new\ time\ based\ on\ how\ long\ the\ customer\ has\ waited\ in\ line.\r\n\ \r\n
comment3.params=customer\ iD\ needs\ currentTime
comment3.target=int\ fruitqueue(java.lang.Object,\ int,\ java.util.ArrayList,\ int)
comment3.text=\r\n\ This\ method\ is\ for\ the\ fruit\ queue.\ \r\n\ It\ starts\ by\ generating\ a\ waiting\ time\ for\ each\ customer\ to\ stay\ on\ the\ queue\ using\ the\ Gaussian\ method\ based\ on\ a\ mean\ amount\ of\ time\ and\ standard\ deviation\ given\ \r\n\ in\ class.\ It\ adds\ this\ time\ to\ the\ current\ time,\ and\ that\ added\ time\ is\ the\ time\ that\ the\ customers\ will\ receive\ their\ item,\ be\ removed\ from\ the\ queue\ and\ move\ on\r\n\ to\ their\ next\ item\ in\ the\ next\ queue\ if\ they\ have\ one.\ \r\n\ It\ checks\ to\ see\ if\ that\ stall\ type\ item\ is\ in\ the\ customers\ queue,\ if\ it\ is\ then\ the\ method\ checks\ to\ make\ sure\ that\ market\ has\ not\ closed.\ If\ the\ market\ has\ not\r\n\ closed,\ then\ it\ adds\ the\ customer\ to\ the\ queue\ for\ that\ item.\ The\ method\ waits\ until\ the\ current\ time\ increments\ and\ when\ the\ wait\ time\ has\ reached\ the\ current\ time,\ \r\n\ that\ is\ when\ the\ customer\ is\ removed\ from\ the\ queue.\ Those\ needs\ are\ removed\ from\ their\ lists\ and\ the\ money\ made\ in\ the\ market\ is\ incremented.\r\n\ \r\n\ @param\ The\ Customer\ object\ that\ will\ be\ placed\ on\ the\ queue.\r\n\ @param\ The\ id\ of\ the\ Customer.\r\n\ @param\ The\ Array\ List\ of\ needs\ the\ customer\ has.\r\n\ @param\ The\ current\ time.\r\n\ \r\n\ @return\ The\ new\ time\ based\ on\ how\ long\ the\ customer\ has\ waited\ in\ line.\r\n\ \r\n
comment4.params=customer\ iD\ needs\ currentTime
comment4.target=int\ vegetablequeue(java.lang.Object,\ int,\ java.util.ArrayList,\ int)
comment4.text=\r\n\ This\ method\ is\ for\ the\ vegetable\ queue.\ \r\n\ It\ starts\ by\ generating\ a\ waiting\ time\ for\ each\ customer\ to\ stay\ on\ the\ queue\ using\ the\ Gaussian\ method\ based\ on\ a\ mean\ amount\ of\ time\ and\ standard\ deviation\ given\ \r\n\ in\ class.\ It\ adds\ this\ time\ to\ the\ current\ time,\ and\ that\ added\ time\ is\ the\ time\ that\ the\ customers\ will\ receive\ their\ item,\ be\ removed\ from\ the\ queue\ and\ move\ on\r\n\ to\ their\ next\ item\ in\ the\ next\ queue\ if\ they\ have\ one.\ \r\n\ It\ checks\ to\ see\ if\ that\ stall\ type\ item\ is\ in\ the\ customers\ queue,\ if\ it\ is\ then\ the\ method\ checks\ to\ make\ sure\ that\ market\ has\ not\ closed.\ If\ the\ market\ has\ not\r\n\ closed,\ then\ it\ adds\ the\ customer\ to\ the\ queue\ for\ that\ item.\ The\ method\ waits\ until\ the\ current\ time\ increments\ and\ when\ the\ wait\ time\ has\ reached\ the\ current\ time,\ \r\n\ that\ is\ when\ the\ customer\ is\ removed\ from\ the\ queue.\ Those\ needs\ are\ removed\ from\ their\ lists\ and\ the\ money\ made\ in\ the\ market\ is\ incremented.\r\n\ \r\n\ @param\ The\ Customer\ object\ that\ will\ be\ placed\ on\ the\ queue.\r\n\ @param\ The\ id\ of\ the\ Customer.\r\n\ @param\ The\ Array\ List\ of\ needs\ the\ customer\ has.\r\n\ @param\ The\ current\ time.\r\n\ \r\n\ @return\ The\ new\ time\ based\ on\ how\ long\ the\ customer\ has\ waited\ in\ line.\r\n\ \r\n
comment5.params=customer\ iD\ needs\ currentTime
comment5.target=int\ meatqueue(java.lang.Object,\ int,\ java.util.ArrayList,\ int)
comment5.text=\r\n\ This\ method\ is\ for\ the\ meat\ queue.\ \r\n\ It\ starts\ by\ generating\ a\ waiting\ time\ for\ each\ customer\ to\ stay\ on\ the\ queue\ using\ the\ Gaussian\ method\ based\ on\ a\ mean\ amount\ of\ time\ and\ standard\ deviation\ given\ \r\n\ in\ class.\ It\ adds\ this\ time\ to\ the\ current\ time,\ and\ that\ added\ time\ is\ the\ time\ that\ the\ customers\ will\ receive\ their\ item,\ be\ removed\ from\ the\ queue\ and\ move\ on\r\n\ to\ their\ next\ item\ in\ the\ next\ queue\ if\ they\ have\ one.\ \r\n\ It\ checks\ to\ see\ if\ that\ stall\ type\ item\ is\ in\ the\ customers\ queue,\ if\ it\ is\ then\ the\ method\ checks\ to\ make\ sure\ that\ market\ has\ not\ closed.\ If\ the\ market\ has\ not\r\n\ closed,\ then\ it\ adds\ the\ customer\ to\ the\ queue\ for\ that\ item.\ The\ method\ waits\ until\ the\ current\ time\ increments\ and\ when\ the\ wait\ time\ has\ reached\ the\ current\ time,\ \r\n\ that\ is\ when\ the\ customer\ is\ removed\ from\ the\ queue.\ Those\ needs\ are\ removed\ from\ their\ lists\ and\ the\ money\ made\ in\ the\ market\ is\ incremented.\r\n\ \r\n\ @param\ The\ Customer\ object\ that\ will\ be\ placed\ on\ the\ queue.\r\n\ @param\ The\ id\ of\ the\ Customer.\r\n\ @param\ The\ Array\ List\ of\ needs\ the\ customer\ has.\r\n\ @param\ The\ current\ time.\r\n\ \r\n\ @return\ The\ new\ time\ based\ on\ how\ long\ the\ customer\ has\ waited\ in\ line.\r\n\ \r\n
comment6.params=customer\ iD\ needs\ currentTime
comment6.target=int\ beveragesqueue(java.lang.Object,\ int,\ java.util.ArrayList,\ int)
comment6.text=\r\n\ This\ method\ is\ for\ the\ beverages\ queue.\ \r\n\ It\ starts\ by\ generating\ a\ waiting\ time\ for\ each\ customer\ to\ stay\ on\ the\ queue\ using\ the\ Gaussian\ method\ based\ on\ a\ mean\ amount\ of\ time\ and\ standard\ deviation\ given\ \r\n\ in\ class.\ It\ adds\ this\ time\ to\ the\ current\ time,\ and\ that\ added\ time\ is\ the\ time\ that\ the\ customers\ will\ receive\ their\ item,\ be\ removed\ from\ the\ queue\ and\ move\ on\r\n\ to\ their\ next\ item\ in\ the\ next\ queue\ if\ they\ have\ one.\ \r\n\ It\ checks\ to\ see\ if\ that\ stall\ type\ item\ is\ in\ the\ customers\ queue,\ if\ it\ is\ then\ the\ method\ checks\ to\ make\ sure\ that\ market\ has\ not\ closed.\ If\ the\ market\ has\ not\r\n\ closed,\ then\ it\ adds\ the\ customer\ to\ the\ queue\ for\ that\ item.\ The\ method\ waits\ until\ the\ current\ time\ increments\ and\ when\ the\ wait\ time\ has\ reached\ the\ current\ time,\ \r\n\ that\ is\ when\ the\ customer\ is\ removed\ from\ the\ queue.\ Those\ needs\ are\ removed\ from\ their\ lists\ and\ the\ money\ made\ in\ the\ market\ is\ incremented.\r\n\ \r\n\ @param\ The\ Customer\ object\ that\ will\ be\ placed\ on\ the\ queue.\r\n\ @param\ The\ id\ of\ the\ Customer.\r\n\ @param\ The\ Array\ List\ of\ needs\ the\ customer\ has.\r\n\ @param\ The\ current\ time.\r\n\ \r\n\ @return\ The\ new\ time\ based\ on\ how\ long\ the\ customer\ has\ waited\ in\ line.\r\n\ \r\n
comment7.params=customer\ iD\ needs\ currentTime
comment7.target=int\ dairyqueue(java.lang.Object,\ int,\ java.util.ArrayList,\ int)
comment7.text=\r\n\ This\ method\ is\ for\ the\ dairy\ queue.\ \r\n\ It\ starts\ by\ generating\ a\ waiting\ time\ for\ each\ customer\ to\ stay\ on\ the\ queue\ using\ the\ Gaussian\ method\ based\ on\ a\ mean\ amount\ of\ time\ and\ standard\ deviation\ given\ \r\n\ in\ class.\ It\ adds\ this\ time\ to\ the\ current\ time,\ and\ that\ added\ time\ is\ the\ time\ that\ the\ customers\ will\ receive\ their\ item,\ be\ removed\ from\ the\ queue\ and\ move\ on\r\n\ to\ their\ next\ item\ in\ the\ next\ queue\ if\ they\ have\ one.\ \r\n\ It\ checks\ to\ see\ if\ that\ stall\ type\ item\ is\ in\ the\ customers\ queue,\ if\ it\ is\ then\ the\ method\ checks\ to\ make\ sure\ that\ market\ has\ not\ closed.\ If\ the\ market\ has\ not\r\n\ closed,\ then\ it\ adds\ the\ customer\ to\ the\ queue\ for\ that\ item.\ The\ method\ waits\ until\ the\ current\ time\ increments\ and\ when\ the\ wait\ time\ has\ reached\ the\ current\ time,\ \r\n\ that\ is\ when\ the\ customer\ is\ removed\ from\ the\ queue.\ Those\ needs\ are\ removed\ from\ their\ lists\ and\ the\ money\ made\ in\ the\ market\ is\ incremented.\r\n\ \r\n\ @param\ The\ Customer\ object\ that\ will\ be\ placed\ on\ the\ queue.\r\n\ @param\ The\ id\ of\ the\ Customer.\r\n\ @param\ The\ Array\ List\ of\ needs\ the\ customer\ has.\r\n\ @param\ The\ current\ time.\r\n\ \r\n\ @return\ The\ new\ time\ based\ on\ how\ long\ the\ customer\ has\ waited\ in\ line.\r\n\ \r\n
comment8.params=customer\ iD\ needs\ currentTime
comment8.target=void\ nullqueue(java.lang.Object,\ int,\ java.util.ArrayList,\ int)
comment8.text=\r\n\ This\ method\ is\ for\ when\ the\ list\ of\ needs\ is\ empty.\ When\ the\ customer\ has\ no\ more\ needs,\ the\ customer\ leaves\ the\ market.\r\n\ \r\n\ @param\ The\ Customer\ object\ that\ will\ be\ placed\ on\ the\ queue.\r\n\ @param\ The\ id\ of\ the\ Customer.\r\n\ @param\ The\ Array\ List\ of\ needs\ the\ customer\ has.\r\n\ \r\n
numComments=9
