#BlueJ class context
comment0.params=
comment0.target=UnDirectedGraphTest()
comment0.text=\r\n\ Default\ constructor\ for\ test\ class\ UnDirectedGraphTest\r\n
comment1.params=
comment1.target=void\ setUp()
comment1.text=\r\n\ Sets\ up\ the\ test\ fixture.\r\n\r\n\ Called\ before\ every\ test\ case\ method.\r\n
comment10.params=
comment10.target=void\ testGetterMethodsEdgeNode()
comment10.text=\r\n\ Creates\ a\ new\ graph\r\n\ Add\ two\ nodes,\ node\ 1\ and\ node\ 2,\ to\ the\ graph\r\n\ Add\ an\ edge\ connecting\ those\ two\ ndoes\r\n\ Tests\ the\ getNodeName\ method\ \r\n\ Asserts\ that\ the\ Nodes\ have\ the\ correct\ Names\ using\ the\ getNodeName\ method\r\n\ Creates\ a\ Linked\ List\ which\ stores\ Edges\ and\ will\ act\ as\ a\ Nodes\ adjancy\ list\r\n\ Makes\ the\ list\ equal\ t\ the\ adjancy\ list\ in\ node\ 1\r\n\ Tests\ the\ getEdgeName\ method\r\n\ Tests\ the\ getEdgeWeight\ method\r\n\ Asserts\ that\ Node\ 1\ only\ goes\ to\ 2\r\n\ Asserts\ that\ the\ Edge\ between\ 1\ and\ 2\ has\ a\ weight\ of\ 3.0\r\n
comment11.params=
comment11.target=void\ dijkstrasAlgorithmTest1()
comment11.text=\r\n\ Creates\ a\ graph\r\n\ Adds\ two\ Nodes\r\n\ Adds\ an\ edge\r\n\ Gets\ shortest\ path\r\n\ Asserts\ that\ the\ shortest\ path\ method\ is\ returning\ something\r\n\ Asserts\ that\ the\ size\ is\ equal\ to\ 2\r\n\ \r\n
comment12.params=
comment12.target=void\ dijkstrasAlgorithmTest2()
comment12.text=\r\n\ Creates\ a\ new\ graph\r\n\ Adds\ 5\ nodes\r\n\ Adds\ Edges\r\n\ Asserts\ that\ the\ shortest\ path\ from\ 1\ to\ 4\ is\ through\ 1,\ 2,\ 4\ instead\ of\ going\ straight\ 1\ to\ 4\r\n
comment13.params=
comment13.target=void\ getEdgeTest()
comment13.text=\r\n\ \r\n
comment2.params=
comment2.target=void\ tearDown()
comment2.text=\r\n\ Tears\ down\ the\ test\ fixture.\r\n\r\n\ Called\ after\ every\ test\ case\ method.\r\n
comment3.params=
comment3.target=void\ graphNotNullTest()
comment3.text=\r\n\ Makes\ sure\ that\ Graph\ is\ not\ null\ and\ it\ has\ been\ initialized.\r\n
comment4.params=
comment4.target=void\ addNodeTrue()
comment4.text=\r\n\ Creates\ a\ new\ graph\r\n\ Adds\ a\ Node\ to\ the\ graph\ \r\n\ Asserts\ that\ the\ Add\ Node\ method\ is\ returning\ true\ and\ it\ properly\ inserting\ Nodes\r\n
comment5.params=
comment5.target=void\ addManyNodesTrue()
comment5.text=\r\n\ Creates\ a\ new\ graph\r\n\ Adds\ 10\ nodes\ starting\ with\ Node\ 1\ to\ Node\ 10\r\n\ Asserts\ that\ all\ of\ these\ nodes\ are\ being\ added\ to\ the\ graph\ and\ it\ is\ returning\ true\r\n\ Asserts\ that\ the\ graph\ is\ not\ null\r\n
comment6.params=
comment6.target=void\ addNodeThatIsAlreadyThereFalse()
comment6.text=\r\n\ Creates\ a\ new\ graph\r\n\ Adds\ a\ Node\ to\ the\ graph\ called\ Node\ 1\r\n\ Adds\ the\ same\ Node\ to\ the\ graph\r\n\ Asserts\ false\ when\ you\ try\ to\ add\ a\ node\ that\ is\ already\ there\r\n
comment7.params=
comment7.target=void\ addEdgeTrue()
comment7.text=\r\n\ Creates\ a\ new\ graph\r\n\ Adds\ 10\ nodes\ to\ the\ graph\r\n\ Asserts\ that\ the\ add\ edge\ method\ is\ returning\ true\ given\ two\ nodes\ and\ a\ weight\r\n
comment8.params=
comment8.target=void\ addManyEdgeTrue()
comment8.text=\r\n\ Creates\ a\ new\ graph\r\n\ Adds\ 10\ nodes\ to\ the\ new\ graph\r\n\ Makes\ sure\ that\ all\ those\ edges\ have\ been\ properly\ added\ and\ the\ add\ edge\ method\ is\ \r\n\ returning\ true\r\n\ Creates\ a\ LinkedList\ which\ stores\ edges\ which\ will\ act\ as\ a\ Nodes\ adjacency\ list\r\n\ Retrieves\ Node\ 1s\ adjacency\ list\r\n\ Prints\ out\ Node\ 1s\ adjacency\ list\r\n
comment9.params=
comment9.target=void\ edgesAreCorrectTrue()
comment9.text=\r\n\ Creates\ a\ new\ graph\r\n\ Adds\ 10\ nodes\r\n\ Adds\ 10\ edges\ for\ those\ 10\ nodes\ to\ connect\ to\ each\ other\r\n\ Creates\ a\ Linked\ List\ which\ stores\ Edges\ and\ will\ act\ as\ a\ Nodes\ adjancy\ list\r\n\ Makes\ the\ list\ equal\ t\ the\ adjancy\ list\ in\ node\ 1\r\n\ Asserts\ that\ Node\ 1\ has\ two\ adjancies\r\n\ Asserts\ that\ the\ two\ adjancies\ in\ Node\ 1\ are\ 2\ and\ 10\r\n
numComments=14
